(()=>{var t={82:t=>{t.exports=class{static async get(t){try{const r=await fetch(t);if(!r.ok)throw new Error(`HTTP error! Status: ${r.status}`);return await r.json()}catch(t){throw new Error(`GET request failed: ${t.message}`)}}static async post(t,r){try{const e=await fetch(t,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(r)});if(!e.ok)throw new Error(`HTTP error! Status: ${e.status}`);return await e.json()}catch(t){throw new Error(`POST request failed: ${t.message}`)}}static async put(t,r){try{const e=await fetch(t,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(r)});if(!e.ok)throw new Error(`HTTP error! Status: ${e.status}`);return await e.json()}catch(t){throw new Error(`PUT request failed: ${t.message}`)}}static async delete(t){try{const r=await fetch(t,{method:"DELETE"});if(!r.ok)throw new Error(`HTTP error! Status: ${r.status}`);return await r.json()}catch(t){throw new Error(`DELETE request failed: ${t.message}`)}}static async options(t,r){try{const e=await fetch(t,{method:"OPTIONS",headers:{"Content-Type":"application/json"},body:JSON.stringify(r)});if(!e.ok)throw new Error(`HTTP error! Status: ${e.status}`);return await e.json()}catch(t){throw new Error(`OPTIONS request failed: ${t.message}`)}}static async head(t,r){try{const e=await fetch(t,{method:"HEAD",headers:{"Content-Type":"application/json"},body:JSON.stringify(r)});if(!e.ok)throw new Error(`HTTP error! Status: ${e.status}`);return await e.json()}catch(t){throw new Error(`HEAD request failed: ${t.message}`)}}static async connect(t,r){try{const e=await fetch(t,{method:"CONNECT",headers:{"Content-Type":"application/json"},body:JSON.stringify(r)});if(!e.ok)throw new Error(`HTTP error! Status: ${e.status}`);return await e.json()}catch(t){throw new Error(`CONNECT request failed: ${t.message}`)}}static async trace(t,r){try{const e=await fetch(t,{method:"TRACE",headers:{"Content-Type":"application/json"},body:JSON.stringify(r)});if(!e.ok)throw new Error(`HTTP error! Status: ${e.status}`);return await e.json()}catch(t){throw new Error(`TRACE request failed: ${t.message}`)}}static async patch(t,r){try{const e=await fetch(t,{method:"PATCH",headers:{"Content-Type":"application/json"},body:JSON.stringify(r)});if(!e.ok)throw new Error(`HTTP error! Status: ${e.status}`);return await e.json()}catch(t){throw new Error(`PATCH request failed: ${t.message}`)}}}}},r={};!function e(a){var s=r[a];if(void 0!==s)return s.exports;var o=r[a]={exports:{}};return t[a](o,o.exports,e),o.exports}(82)})();